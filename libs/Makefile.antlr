#
# Makefile for ANTLR 1.33
#
# ANTLR 1.33
# Terence Parr
# Parr Research Corporation
# with Purdue University
# and AHPCRC, University of Minnesota
# 1989-1995
#
# Ported to Borland C++, IBM C-Set/2 and Microsoft 6.0 by
# Ed Harfmann
# Micro Data Base Systems
# Lafayette, Indiana
#
SET=../support/set
PCCTS_H=../h

#
#   Cygwin build using MSVC
#
CC=cl
ANTLR=../bin/Antlr.exe
DLG=../bin/Dlg.exe
INTDIR=.
#CPP_PROJ=/nologo /MTd /W3 /Gm /ZI /Od /I "." /I $(PCCTS_H) /I $(SET) /D "__STDC__" /D "LONGFILENAMES" /D "PC" /D "USER_ZZSYN" /D ZZLEXBUFSIZE=65536 /D "_DEBUG" /D "WIN32" /D "_CONSOLE" /D "_MBCS" /FR"$(INTDIR)\\" /Fo"$(INTDIR)\\" /Fd"$(INTDIR)\\" /FD /c 
CPP_PROJ=/nologo /MT /W3 /O2 /I "." /I "$(PCCTS_H)" /I "$(SET)" /D "__STDC__" /D "NDEBUG" /D "LONGFILENAMES" /D "PC" /D "USER_ZZSYN" /D ZZLEXBUFSIZE=65536 /D "_DEBUG" /D "WIN32" /D "_CONSOLE" /D "_MBCS" /FR"$(INTDIR)\\" /Fo"$(INTDIR)\\" /Fd"$(INTDIR)\\" /FD /c 

CFLAGS=$(CPP_PROJ) $(COPT)
OUT_OBJ = -Fo
LIBS=/NOD:LLIBCE LLIBCEP
OBJ_EXT = .obj

LINK32=link.exe
LINK32_FLAGS=kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /nologo /subsystem:console /incremental:no /pdb:"Antlr.pdb" /machine:I386 /out:"Antlr.exe" 
LINK32_OBJS= antlr.obj 	bits.obj build.obj dumpnode.obj egman.obj \
	err.obj fcache.obj fset.obj fset2.obj gen.obj globals.obj \
	hash.obj lex.obj main.obj misc.obj mrhoist.obj pred.obj \
	scan.obj set.obj

LINK32_OBJS= antlr.obj  bits.obj build.obj dumpnode.obj egman.obj \
	err.obj fcache.obj fset.obj fset2.obj gen.obj globals.obj \
	hash.obj lex.obj main.obj misc.obj mrhoist.obj pred.obj \
	scan.obj set.obj

Antlr.exe: $(LINK32_OBJS)
	$(LINK32) $(LINK32_FLAGS) $(LINK32_OBJS)
	cp Antlr.exe $(ANTLR)


# *********** Target list of PC machines ***********
#
# Don't worry about the ambiguity messages coming from antlr
# for making antlr.c etc...  [should be 10 of them, I think]

%$(OBJ_EXT): %.c
	$(CC) $(CFLAGS) $<


antlr.c stdpccts.h parser.dlg tokens.h err.c : antlr.g
	$(ANTLR) -gh antlr.g

antlr$(OBJ_EXT): antlr.c mode.h tokens.h

scan$(OBJ_EXT): scan.c mode.h tokens.h


scan.c mode.h: parser.dlg
	$(DLG) -C2 parser.dlg scan.c

set$(OBJ_EXT): $(SET)/set.c
	$(CC) $(CFLAGS) -c $(OUT_OBJ)set$(OBJ_EXT) $(SET)/set.c



#
# ****** These next targets are common to UNIX and PC world ********
#

#clean up all the intermediate files
clean:
	rm -f *$(OBJ_EXT) core

#remove everything in clean plus the PCCTS files generated
scrub:
	rm -f $(PCCTS_GEN) *$(OBJ_EXT) core


